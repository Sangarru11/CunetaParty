package com.github.Sangarru11.CunetaParty.model.DAO;

import com.github.Sangarru11.CunetaParty.model.Connection.ConnectionMariaDB;
import com.github.Sangarru11.CunetaParty.model.entity.empleados;

import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class empleadosDAO implements DAO<empleados,String>{
    private static final String FINDBYDNI = "SELECT c.ID, c.Nombre, c.DNI, c.Especialidad FROM empleados AS c WHERE c.Nombre=?";
    private static final String FINDBYID = "SELECT c.id_empleado, c.Nombre, c.DNI, c.Especialidad FROM empleados AS c WHERE c.id_empleado = ?";
    private static final String FINDBYNAME = "SELECT c.ID, c.Nombre, c.DNI, c.Especialidad FROM empleados AS c WHERE c.Nombre=?";
    private static final String INSERT = "INSERT INTO empleados (Nombre, DNI, Especialidad) VALUES (?, ?, ?)";
    private static final String UPDATE = "UPDATE empleados SET name=? WHERE id_empleado=?";
    private static final String DELETE = "DELETE FROM empleados WHERE id_empleado=?";
    private Connection connection;

    public empleadosDAO() {
        connection = ConnectionMariaDB.getConnection();
    }
    @Override
    public empleados save(empleados entity) {
        empleados result = entity;
        if (entity != null) {
            String dni = entity.getDNI();
            if (dni != null) {
                empleados isInDataBase = findByDNI(dni);
                if (isInDataBase == null) {
                    try (PreparedStatement pst = connection.prepareStatement(INSERT)) {
                        pst.setString(1, dni);
                        pst.setString(2, entity.getNombre());
                        pst.setString(3, entity.getEspecialidad());
                        pst.executeUpdate();
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                } else {
                    try (PreparedStatement pst = connection.prepareStatement(UPDATE)) {
                        pst.setString(1, entity.getNombre());
                        pst.setInt(2, entity.getId_empleado());
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }
            }
        }
        return result;
    }

    @Override
    public empleados delete(empleados entity) throws SQLException {
        if (entity != null){
            try (PreparedStatement pst = connection.prepareStatement(DELETE)){
                pst.setInt(1, entity.getId_empleado());
                pst.executeUpdate();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        return entity;
    }

    @Override
    public empleados findById(String key) {
        empleados result = null;
        try (PreparedStatement pst = connection.prepareStatement(FINDBYID)){
            pst.setString(1,key);
            try(ResultSet res = pst.executeQuery()){
                if (res.next()){
                    empleados e = new empleados();
                    e.setId_empleado(res.getInt("id_empleado"));
                    e.setDNI(res.getString("DNI"));
                    e.setNombre(res.getString("Nombre"));
                    e.setEspecialidad(res.getString("Especialidad"));
                    result = e;
                }
            }
        }catch (SQLException e){
            e.printStackTrace();
        }
        return result;
    }

    @Override
    public List<empleados> findbyAll() {
        List<empleados> result = new ArrayList<>();
        try (PreparedStatement pst = connection.prepareStatement("SELECT * FROM empleados")){
            try(ResultSet res = pst.executeQuery()){
                while (res.next()){
                    empleados e = new empleados();
                    e.setId_empleado(res.getInt("id_empleado"));
                    e.setDNI(res.getString("DNI"));
                    e.setNombre(res.getString("Nombre"));
                    e.setEspecialidad(res.getString("Especialidad"));
                    result.add(e);
                }
            }
        }catch (SQLException e){
            e.printStackTrace();
        }
        return result;
    }

    @Override
    public empleados findByDate(String key) {
        return null;
    }

    @Override
    public empleados findByDNI(String key) {
        return null;
    }

    @Override
    public empleados findByName(String key) {
        return null;
    }

    @Override
    public void close() throws IOException {

    }
}
