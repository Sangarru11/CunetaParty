package com.github.Sangarru11.CunetaParty.model.DAO;

import com.github.Sangarru11.CunetaParty.model.Connection.ConnectionMariaDB;
import com.github.Sangarru11.CunetaParty.model.entity.clientes;
import com.github.Sangarru11.CunetaParty.model.entity.empleados;

import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class clientesDAO implements DAO<clientes, String> {
    private static final String FINDBYDNI = "SELECT ID, id_vehiculo, dni, Nombre, Telefono, password FROM clientes WHERE dni=?";
    private static final String FINDBYID = "SELECT ID, id_vehiculo, dni, Nombre, Telefono, password FROM clientes WHERE ID=?";
    private static final String FINDBYNAME = "SELECT ID, id_vehiculo, dni, Nombre, Telefono, password FROM clientes WHERE Nombre=?";
    private static final String INSERT = "INSERT INTO clientes (id_vehiculo, dni, Nombre, Telefono, password) VALUES (?, ?, ?, ?, ?)";
    private static final String UPDATE = "UPDATE clientes SET id_vehiculo=?, Nombre=?, Telefono=?, password=? WHERE ID=?";
    private static final String DELETE = "DELETE FROM clientes WHERE ID=?";
    private Connection connection;

    public clientesDAO() {
        connection = ConnectionMariaDB.getConnection();
    }

    @Override
    public clientes save(clientes entity) {
        clientes result = entity;
        if (entity != null) {
            String dni = entity.getDni();
            if (dni != null) {
                clientes isInDataBase = findByDNI(dni);
                if (isInDataBase == null) {
                    try (PreparedStatement pst = connection.prepareStatement(INSERT)) {
                        pst.setInt(1, entity.getId_vehiculo());
                        pst.setString(2, entity.getDni());
                        pst.setString(3, entity.getNombre());
                        pst.setString(4, entity.getTelefono());
                        pst.setString(5, entity.getPassword());
                        pst.executeUpdate();
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                } else {
                    try (PreparedStatement pst = connection.prepareStatement(UPDATE)) {
                        pst.setInt(1, entity.getId_vehiculo());
                        pst.setString(2, entity.getNombre());
                        pst.setString(3, entity.getTelefono());
                        pst.setString(4, entity.getPassword());
                        pst.setInt(5, isInDataBase.getId_cliente());
                        pst.executeUpdate();
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }
            }
        }
        return result;
    }

    @Override
    public clientes delete(clientes entity) throws SQLException {
        if (entity != null) {
            try (PreparedStatement pst = connection.prepareStatement(DELETE)) {
                pst.setInt(1, entity.getId_cliente());
                pst.executeUpdate();
            }
        }
        return entity;
    }

    @Override
    public empleados adminManage(empleados entity) throws SQLException {
        return null;
    }

    @Override
    public clientes findById(String key) {
        clientes result = null;
        try (PreparedStatement pst = connection.prepareStatement(FINDBYID)) {
            pst.setString(1, key);
            try (ResultSet res = pst.executeQuery()) {
                if (res.next()) {
                    clientes c = new clientes();
                    c.setId_cliente(res.getInt("ID"));
                    c.setId_vehiculo(res.getInt("id_vehiculo"));
                    c.setDni(res.getString("dni"));
                    c.setNombre(res.getString("Nombre"));
                    c.setTelefono(res.getString("Telefono"));
                    c.setPassword(res.getString("password"));
                    result = c;
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return result;
    }

    @Override
    public List<clientes> findbyAll() {
        List<clientes> result = new ArrayList<>();
        try (PreparedStatement pst = connection.prepareStatement("SELECT * FROM clientes")) {
            try (ResultSet res = pst.executeQuery()) {
                while (res.next()) {
                    clientes c = new clientes();
                    c.setId_cliente(res.getInt("ID"));
                    c.setId_vehiculo(res.getInt("id_vehiculo"));
                    c.setDni(res.getString("dni"));
                    c.setNombre(res.getString("Nombre"));
                    c.setTelefono(res.getString("Telefono"));
                    c.setPassword(res.getString("password"));
                    result.add(c);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return result;
    }

    @Override
    public clientes findByName(String key) {
        clientes result = null;
        try (PreparedStatement pst = connection.prepareStatement(FINDBYNAME)) {
            pst.setString(1, key);
            try (ResultSet res = pst.executeQuery()) {
                if (res.next()) {
                    clientes c = new clientes();
                    c.setId_cliente(res.getInt("ID"));
                    c.setId_vehiculo(res.getInt("id_vehiculo"));
                    c.setDni(res.getString("dni"));
                    c.setNombre(res.getString("Nombre"));
                    c.setTelefono(res.getString("Telefono"));
                    c.setPassword(res.getString("password"));
                    result = c;
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return result;
    }

    @Override
    public clientes findByDate(String key) {
        return null;
    }

    @Override
    public clientes findByDNI(String key) {
        clientes result = null;
        try (PreparedStatement pst = connection.prepareStatement(FINDBYDNI)) {
            pst.setString(1, key);
            try (ResultSet res = pst.executeQuery()) {
                if (res.next()) {
                    clientes c = new clientes();
                    c.setId_cliente(res.getInt("ID"));
                    c.setId_vehiculo(res.getInt("id_vehiculo"));
                    c.setDni(res.getString("dni"));
                    c.setNombre(res.getString("Nombre"));
                    c.setTelefono(res.getString("Telefono"));
                    c.setPassword(res.getString("password"));
                    result = c;
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return result;
    }

    @Override
    public void close() throws IOException {

    }
    public void assignVehicleToClient(int clienteId, int vehiculoId) throws SQLException {
        try (PreparedStatement pst = connection.prepareStatement(UPDATE_CLIENTE_VEHICULO)) {
            pst.setInt(1, vehiculoId);
            pst.setInt(2, clienteId);
            pst.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
            throw new SQLException("Error al asignar el veh√≠culo al cliente", e);
        }
    }

    public static clientesDAO build() {
        return new clientesDAO();
    }
}